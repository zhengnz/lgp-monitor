// Generated by CoffeeScript 1.12.7
(function() {
  var appModel, commitModel, viewModel;

  ko.bindingHandlers.trigger = {
    init: function(element, valueAccessor) {
      return $(element).click(function() {
        var value;
        value = valueAccessor();
        value(!value());
        return false;
      });
    }
  };

  ko.bindingHandlers.textBottom = {
    update: function(element, valueAccessor) {
      var e, txt, value;
      value = valueAccessor();
      txt = ko.unwrap(value);
      e = $(element).parent();
      $(element).text(txt);
      return e.scrollTop(e[0].scrollHeight);
    }
  };

  commitModel = (function() {
    function commitModel(parent, data1) {
      this.parent = parent;
      this.data = data1;
      ko.mapping.fromJS(this.data, {}, this);
    }

    commitModel.prototype.rollback = function() {
      if (confirm("确认回滚到" + (this.id()) + "?") && this.parent.parent.loading() === false) {
        $('#commits').modal('hide');
        this.parent.parent.loading(true);
        return this.parent.parent.client.git_rollback(this.parent.name(), this.id()).then((function(_this) {
          return function(version) {
            alert('回滚操作完成，详情请看操作日志');
            return _this.parent.git_version(version);
          };
        })(this))["catch"](function(err) {
          alert('发生错误，请查看控制台');
          return console.log(err);
        }).whenComplete((function(_this) {
          return function() {
            return _this.parent.parent.loading(false);
          };
        })(this));
      }
    };

    return commitModel;

  })();

  appModel = (function() {
    function appModel(parent, data1) {
      this.parent = parent;
      this.data = data1;
      ko.mapping.fromJS(this.data, {}, this);
      this.log = ko.observable('');
      this.output = ko.observable('');
      this.pause = ko.observable(false);
      this.pause.subscribe((function(_this) {
        return function(v) {
          if (v === false) {
            return _this.output(_this.log());
          }
        };
      })(this));
      this.log.subscribe((function(_this) {
        return function(v) {
          if (_this.pause() === false) {
            return _this.output(v);
          }
        };
      })(this));
      this.show_log = ko.observable(false);
      this.show_log.subscribe((function(_this) {
        return function(v) {
          if (v === true) {
            return _this.parent.client.subscribe(_this.name(), function(data) {
              if (data !== 'CLIENT EXIT') {
                return _this.log("" + (_this.log()) + data);
              }
            });
          } else {
            _this.parent.client.unsubscribe(_this.name());
            return _this.parent.client.client_exit(_this.name());
          }
        };
      })(this));
    }

    appModel.prototype.show = function() {
      _.each(this.parent.app_list(), function(app) {
        return app.show_log(false);
      });
      this.show_log(true);
      return this.parent.view_app(this);
    };

    appModel.prototype.reload = function() {
      if (this.parent.loading() === true) {
        return;
      }
      this.parent.loading(true);
      return this.parent.client.reload(this.name())["catch"](function(err) {
        alert('发生错误，请查看控制台');
        return console.log(err);
      }).whenComplete((function(_this) {
        return function() {
          return _this.parent.loading(false);
        };
      })(this));
    };

    appModel.prototype.restart = function() {
      if (this.parent.loading() === true) {
        return;
      }
      this.parent.loading(true);
      return this.parent.client.restart(this.name())["catch"](function(err) {
        alert('发生错误，请查看控制台');
        return console.log(err);
      }).whenComplete((function(_this) {
        return function() {
          return _this.parent.loading(false);
        };
      })(this));
    };

    appModel.prototype.pull = function() {
      if (this.parent.loading() === true) {
        return;
      }
      this.parent.loading(true);
      return this.parent.client.git(this.name(), this.branch()).then((function(_this) {
        return function(version) {
          return _this.git_version(version);
        };
      })(this))["catch"](function(err) {
        alert('发生错误，请查看控制台');
        return console.log(err);
      }).whenComplete((function(_this) {
        return function() {
          return _this.parent.loading(false);
        };
      })(this));
    };

    appModel.prototype.npm = function() {
      if (this.parent.loading() === true) {
        return;
      }
      this.parent.loading(true);
      return this.parent.client.npm_install(this.name())["catch"](function(err) {
        alert('发生错误，请查看控制台');
        return console.log(err);
      }).whenComplete((function(_this) {
        return function() {
          return _this.parent.loading(false);
        };
      })(this));
    };

    appModel.prototype.compile = function() {
      var onsuccess;
      if (this.parent.loading() === true) {
        return;
      }
      onsuccess = function() {};
      return this.parent.client.js_compile(this.name(), onsuccess, {
        oneway: true
      });
    };

    appModel.prototype.list_commit = function() {
      if (this.parent.loading() === true) {
        return;
      }
      this.parent.loading(true);
      return this.parent.client.get_git_commits(this.name()).then((function(_this) {
        return function(rows) {
          _this.parent.commits(_.map(rows, function(row) {
            return new commitModel(_this, row);
          }));
          return $('#commits').modal('show');
        };
      })(this))["catch"](function(err) {
        alert('发生错误，请查看控制台');
        return console.log(err);
      }).whenComplete((function(_this) {
        return function() {
          return _this.parent.loading(false);
        };
      })(this));
    };

    appModel.prototype.clear_log = function() {
      return this.log('');
    };

    return appModel;

  })();

  viewModel = (function() {
    function viewModel() {
      this.client = new hprose.Client.create("/api", ['get_app_list', 'reload', 'restart', 'git', 'get_git_commits', 'git_rollback', 'npm_install', 'js_compile', 'client_exit']);
      this.app_list = ko.observableArray([]);
      this.has_group = ko.computed((function(_this) {
        return function() {
          var has_group;
          has_group = _.find(_this.app_list(), function(app) {
            return _.has(app, 'group');
          });
          return has_group !== void 0;
        };
      })(this));
      this.group_app_list = ko.computed((function(_this) {
        return function() {
          var data, group;
          if (_this.has_group() === false) {
            return [];
          }
          _.each(_this.app_list(), function(app) {
            if (!_.has(app, 'group')) {
              return app.group = ko.observable('其他');
            }
          });
          group = _.groupBy(_this.app_list(), function(app) {
            return app.group();
          });
          data = {
            origin: group,
            keys: _.keys(group)
          };
          console.log(data);
          return data;
        };
      })(this));
      this.view_app = ko.observable(null);
      this.view_app.subscribe(function(v) {
        if (v != null) {
          return setTimeout(function() {
            return $('.ui.dropdown').dropdown({
              on: 'hover',
              action: 'hide'
            });
          }, 300);
        }
      });
      this.list_loading = ko.observable(true);
      this.loading = ko.observable(false);
      this.commits = ko.observableArray([]);
      this.get_app_list();
      this.log = ko.observable('欢迎使用lgp-monitor\n');
      this.client.subscribe('console', (function(_this) {
        return function(data) {
          return _this.log("" + (_this.log()) + data);
        };
      })(this));
    }

    viewModel.prototype.get_app_list = function() {
      return this.client.get_app_list().then((function(_this) {
        return function(rows) {
          return _this.app_list(_.map(rows, function(row) {
            return new appModel(_this, row);
          }));
        };
      })(this))["catch"]((function(_this) {
        return function(err) {
          alert('发生错误，请查看控制台');
          return console.log(err);
        };
      })(this)).whenComplete((function(_this) {
        return function() {
          return _this.list_loading(false);
        };
      })(this));
    };

    viewModel.prototype.refresh_list = function() {
      if (this.list_loading() === true) {
        return;
      }
      this.list_loading(true);
      this.app_list([]);
      return this.get_app_list();
    };

    return viewModel;

  })();

  $(function() {
    ko.applyBindings(new viewModel());
    return $('.ko-hide').removeClass('ko-hide');
  });

}).call(this);

//# sourceMappingURL=index.js.map
